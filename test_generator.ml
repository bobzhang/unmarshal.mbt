(* OCaml test data generator for unmarshal.mbt tests *)
(* Generates test data to marshal_data_test.mbt *)

let marshal_to_mbt_bytes data =
  let s = Marshal.to_string data [] in
  let buf = Buffer.create 100 in
  Buffer.add_string buf "[";
  let len = String.length s in
  for i = 0 to len - 1 do
    if i > 0 && i mod 9 = 0 then Buffer.add_string buf "\n  ";
    Buffer.add_string buf (Printf.sprintf "b'\\x%02x'" (Char.code s.[i]));
    if i < len - 1 then Buffer.add_string buf ", "
  done;
  Buffer.add_string buf "\n]";
  Buffer.contents buf

let print_test_case name value comment =
  Printf.printf "// %s\n" comment;
  Printf.printf "///|\n";
  Printf.printf "let %s_data : Bytes = %s\n\n" name (marshal_to_mbt_bytes value)

(* Generate test cases *)
let () =
  Printf.printf "// Generated test data for OCaml marshal format decoder\n";
  Printf.printf "// This file is auto-generated by test_generator.ml\n";
  Printf.printf "// Run: ocaml test_generator.ml > marshal_data_test.mbt\n\n";
  
  (* Small integers (0-63) *)
  print_test_case "int_0" 0 "Integer 0 - single byte encoding";
  print_test_case "int_1" 1 "Integer 1 - single byte encoding"; 
  print_test_case "int_42" 42 "Integer 42 - single byte encoding";
  print_test_case "int_63" 63 "Integer 63 - single byte encoding";

  (* INT8 range *)
  print_test_case "int_100" 100 "Integer 100 - CODE_INT8";
  print_test_case "int_127" 127 "Integer 127 - CODE_INT8";
  print_test_case "int_neg_1" (-1) "Integer -1 - CODE_INT8";
  print_test_case "int_neg_128" (-128) "Integer -128 - CODE_INT8";

  (* INT16 range *)
  print_test_case "int_1000" 1000 "Integer 1000 - CODE_INT16";
  print_test_case "int_32767" 32767 "Integer 32767 - CODE_INT16";
  print_test_case "int_neg_1000" (-1000) "Integer -1000 - CODE_INT16";
  print_test_case "int_neg_32768" (-32768) "Integer -32768 - CODE_INT16";

  (* INT32 range *)
  print_test_case "int_100000" 100000 "Integer 100000 - CODE_INT32";
  print_test_case "int_2147483647" 2147483647 "Integer 2147483647 - CODE_INT32 max";
  print_test_case "int_neg_100000" (-100000) "Integer -100000 - CODE_INT32";
  print_test_case "int_neg_2147483648" (-2147483648) "Integer -2147483648 - CODE_INT32 min";

  (* Small strings (< 32 chars) *)
  print_test_case "string_empty" "" "Empty string";
  print_test_case "string_a" "a" "Single character string";
  print_test_case "string_hello" "Hello" "String 'Hello'";
  print_test_case "string_31chars" (String.make 31 'x') "31-character string - PREFIX_SMALL_STRING";

  (* STRING8 (32-255 chars) *)
  print_test_case "string_32chars" (String.make 32 'y') "32-character string - CODE_STRING8";
  print_test_case "string_100chars" (String.make 100 'z') "100-character string - CODE_STRING8";
  print_test_case "string_255chars" (String.make 255 'w') "255-character string - CODE_STRING8";

  (* STRING32 (>255 chars) *)
  print_test_case "string_256chars" (String.make 256 'v') "256-character string - CODE_STRING32";
  print_test_case "string_1000chars" (String.make 1000 'u') "1000-character string - CODE_STRING32";

  (* Special characters in strings *)
  print_test_case "string_special" "Hello\nWorld\t!" "String with newline and tab";
  print_test_case "string_unicode" "Hello 世界 🌍" "String with Unicode characters";
  
  (* Additional test cases for lists and tuples *)
  print_test_case "empty_list" [] "Empty list []";
  print_test_case "list_1_2" [1; 2] "List [1; 2]";
  print_test_case "tuple_1_2" (1, 2) "Tuple (1, 2)";
  print_test_case "tuple_hello_42" ("Hello", 42) "Tuple (\"Hello\", 42)";
  
  (* Boolean values *)
  print_test_case "bool_true" true "Boolean true";
  print_test_case "bool_false" false "Boolean false";
  
  (* Float values *)
  print_test_case "float_pi" 3.14159 "Float 3.14159";
  print_test_case "float_neg" (-2.5) "Float -2.5";
  print_test_case "float_zero" 0.0 "Float 0.0";
  
  (* Float arrays *)
  print_test_case "float_array_empty" [| |] "Empty float array";
  print_test_case "float_array_single" [| 3.14 |] "Float array with one element";
  print_test_case "float_array_small" [| 1.0; 2.5; -3.7; 0.0; 42.42 |] "Small float array (5 elements)";
  print_test_case "float_array_medium" (Array.init 100 (fun i -> float_of_int i)) "Medium float array (100 elements)";
  print_test_case "float_array_large" (Array.init 300 (fun i -> float_of_int (i * 2))) "Large float array (300 elements)";
  
  (* Shared data test cases *)
  let shared_string = "shared" in
  print_test_case "shared_string_tuple" (shared_string, shared_string) "Tuple with shared string (\"shared\", \"shared\")";
  
  let shared_list = [1; 2; 3] in
  print_test_case "shared_list_tuple" (shared_list, shared_list) "Tuple with shared list ([1;2;3], [1;2;3])";
  
  let shared_nested = ("test", 42) in
  print_test_case "shared_nested_tuple" (shared_nested, shared_nested) "Tuple with shared nested tuple ((\"test\", 42), (\"test\", 42))";
  
  (* Triple with shared middle element *)
  let shared_middle = "middle" in
  print_test_case "triple_shared_middle" ("first", shared_middle, shared_middle) "Triple with shared middle (\"first\", \"middle\", \"middle\")";
  
  (* List containing shared elements *)
  let shared_elem = "elem" in
  print_test_case "list_with_shared" [shared_elem; shared_elem; shared_elem] "List with same string repeated [\"elem\"; \"elem\"; \"elem\"]";
  
  (* Complex nested structure with sharing *)
  let shared_inner = [10; 20] in
  print_test_case "complex_shared" ((1, shared_inner), (2, shared_inner)) "Complex nested with sharing ((1, [10;20]), (2, [10;20]))";